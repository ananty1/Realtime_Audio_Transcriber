1
00:00:00,191 --> 00:00:03,277
Hi, I am Ananth Yadav from Jaunpur,

2
00:00:03,278 --> 00:00:05,372
Uttar Pradesh. Currently,

3
00:00:05,373 --> 00:00:09,433
I am pursuing my B.Tech from IIT,

4
00:00:09,434 --> 00:00:12,550
Billai in Data Science and Artificial Intelligence.

5
00:00:12,551 --> 00:00:14,911
So, let's head to the project. Okay.

6
00:00:14,912 --> 00:00:17,106
So, I'll first, yeah,

7
00:00:17,107 --> 00:00:22,075
I'll first start my virtual moment.

8
00:00:22,076 --> 00:00:26,868
So, thereby, all I need to like a a

9
00:00:26,869 --> 00:00:32,269
a a a so, yeah, the scripts and then then I don't

10
00:00:32,270 --> 00:00:35,376
actually activate,

11
00:00:35,377 --> 00:00:38,584
yeah, so, yeah, so, thereby, we started our moment.

12
00:00:38,585 --> 00:00:42,786
Now, the next thing is simply we run our server.

13
00:00:42,787 --> 00:00:45,322
So, let's head to our web page.

14
00:00:45,323 --> 00:00:48,898
Okay, so, that's it.

15
00:00:48,899 --> 00:00:53,367
Okay, so, just to make it from the scratch,

16
00:00:53,368 --> 00:00:58,077
what I'll do that I'll try to open

17
00:00:58,078 --> 00:01:01,178
this on the new window. So, let's do this.

18
00:01:01,179 --> 00:01:04,099
Okay, so, I'll introduce incognito.

19
00:01:04,100 --> 00:01:06,663
So, yeah. So,

20
00:01:06,664 --> 00:01:09,479
this is how a piece looks like.

21
00:01:09,480 --> 00:01:11,824
I'll drop this down. Okay,

22
00:01:11,825 --> 00:01:15,383
so, if I start, this is a simple page.

23
00:01:15,384 --> 00:01:18,965
I'll simply record it and yeah,

24
00:01:18,966 --> 00:01:21,361
it asks me permission. Then I'll start and I'll allow it.

25
00:01:21,362 --> 00:01:23,364
Okay, so, I think yeah, connect it.

26
00:01:23,365 --> 00:01:28,110
So, let's start saying something and

27
00:01:28,111 --> 00:01:30,382
yeah, I think it's working right now,

28
00:01:30,383 --> 00:01:35,059
right? So, it's it's actually working and we have

29
00:01:35,060 --> 00:01:37,834
some performance metrics too,

30
00:01:37,835 --> 00:01:40,243
to measure how good it is or not.

31
00:01:40,244 --> 00:01:44,356
So, yeah. So, let's just close it for now and so,

32
00:01:44,357 --> 00:01:47,247
just for the sense, since our clear text is working or not,

33
00:01:47,248 --> 00:01:49,767
we cleared this text and thankfully it's working.

34
00:01:49,768 --> 00:01:52,710
Let's try it again. So, it should write connected.

35
00:01:52,711 --> 00:01:56,433
Okay, great. Then, it should right now print something.

36
00:01:56,434 --> 00:01:58,860
Yeah, go ahead. Okay. So, yeah,

37
00:01:58,861 --> 00:02:03,405
it's writing. Okay. So, let's just close for now and let's just move

38
00:02:03,406 --> 00:02:05,506
to our code,

39
00:02:05,507 --> 00:02:08,700
walkthrough of our code. So, this is our webpage,

40
00:02:08,701 --> 00:02:13,051
which basically includes all the HTML files that you just seen.

41
00:02:13,052 --> 00:02:15,770
Django provides that same thing.

42
00:02:15,771 --> 00:02:17,966
So, this is our simple webpage. What it is,

43
00:02:17,967 --> 00:02:22,624
it's just having simple headers and some some

44
00:02:22,625 --> 00:02:24,839
p tags and some buttons,

45
00:02:24,840 --> 00:02:27,866
the record, record, close, or clear text.

46
00:02:27,867 --> 00:02:32,372
So, this is ah where so this is our basically

47
00:02:32,373 --> 00:02:37,123
our home page you see that and then we have our static folder

48
00:02:37,124 --> 00:02:40,986
under the css we have some css styling you can see there okay i'll

49
00:02:40,987 --> 00:02:45,492
make this down okay so we have some css too and then we have

50
00:02:45,493 --> 00:02:48,454
our javascript which are which is our main folder which is actually containing what

51
00:02:48,455 --> 00:02:52,678
is so i'll may give a basic workflow whether what is thing so this

52
00:02:52,679 --> 00:02:57,798
is just for the counter that since we want only 90 seconds it

53
00:02:57,799 --> 00:03:01,878
to store so this is for that thing and then we have we are

54
00:03:01,879 --> 00:03:06,718
asking the permission and simply yeah this is our this

55
00:03:06,719 --> 00:03:10,779
is the standard thing and then this this is where we are creating our

56
00:03:10,780 --> 00:03:15,552
socket and once the socket is created we are just simply as

57
00:03:15,553 --> 00:03:20,693
soon as we receive any message we are updating our values

58
00:03:20,694 --> 00:03:23,888
in in the real time.

59
00:03:23,889 --> 00:03:26,005
At the user level.

60
00:03:26,006 --> 00:03:30,508
Okay, then we have some functionality like transcript what

61
00:03:30,509 --> 00:03:34,664
will do and then we have a close connection what it has to do.

62
00:03:34,665 --> 00:03:39,226
Okay, so then the most important thing whether how do we are actually

63
00:03:39,227 --> 00:03:44,404
implementing it. So, before going further I will first make a quick walkthrough

64
00:03:44,405 --> 00:03:47,638
of what we are actually doing. So, this this will help us.

65
00:03:49,813 --> 00:03:53,306
So, you see this that this is a ah this is how our workflow

66
00:03:53,307 --> 00:03:57,004
will going to be. User ah will have that render page which you have

67
00:03:57,005 --> 00:04:01,932
just seen now. So, what is that user the the audio will come

68
00:04:01,933 --> 00:04:07,538
from user to ah to it it will go to the ah Django

69
00:04:07,539 --> 00:04:12,353
server which act which handles the socket computer as soon as the it as

70
00:04:12,354 --> 00:04:16,877
soon as it receives the stream data it sends that stream data to the

71
00:04:16,878 --> 00:04:21,770
Deep API. What it does, this DEPRAM API this

72
00:04:21,771 --> 00:04:26,530
DEPRAM API then transcribe that data and

73
00:04:26,531 --> 00:04:31,111
ah and then ah we get back to our transcribe data which where

74
00:04:31,112 --> 00:04:35,447
Django server once it receives it simply sends that to user browser data and

75
00:04:35,448 --> 00:04:37,633
which we get rendered. Okay,

76
00:04:37,634 --> 00:04:41,076
so that's the basic workflow and I'll explain you a simple part.

77
00:04:41,077 --> 00:04:45,710
You know what in order to ah you in order to do this ah

78
00:04:45,711 --> 00:04:48,509
we had to use ah web software.

79
00:04:48,510 --> 00:04:50,593
Since it is a real-time,

80
00:04:50,594 --> 00:04:56,595
so we have our ASCII, we had to use ASGI way

81
00:04:56,596 --> 00:05:01,158
tool for this and as such you can see that there are some custom

82
00:05:01,159 --> 00:05:04,398
built-ins that need to be configured to use this ASGI.

83
00:05:04,399 --> 00:05:09,069
ASGI and then we have our

84
00:05:09,070 --> 00:05:13,621
consumer.py which what is actually it is using this DeepGram API and it

85
00:05:13,622 --> 00:05:18,665
is then first it is trying to connect to our DeepGram API

86
00:05:18,666 --> 00:05:23,518
and as soon as this is connecting this is simply asking ah asking ah

87
00:05:23,519 --> 00:05:28,078
the ah this getinscript transcript function to render

88
00:05:28,079 --> 00:05:30,898
for all the time until the connection is getting close.

89
00:05:31,058 --> 00:05:35,418
So, it is rendering it is ah receiving the data and trying to send

90
00:05:35,419 --> 00:05:37,517
it to the user .

91
00:05:37,518 --> 00:05:39,652
Then we have our disconnected receive function.

92
00:05:39,653 --> 00:05:42,457
So, this was all about this we have the routing functions too.

93
00:05:42,458 --> 00:05:47,015
So, this was all about ah how the code work through before I

94
00:05:47,016 --> 00:05:50,703
end up I will try to see some of the challenges that I faced

95
00:05:50,704 --> 00:05:55,866
they include the django channels I didn't I

96
00:05:55,867 --> 00:06:00,112
had to learn about this django channel so the documentation helped me to learn

97
00:06:00,113 --> 00:06:04,668
about this django channels along with that uhm yeah

98
00:06:04,669 --> 00:06:09,453
this we have to I wanted to know how this we can do this

99
00:06:09,454 --> 00:06:14,093
real time so thankfully tibgram API helps to do this

100
00:06:14,094 --> 00:06:18,782
directly as such and this page this wonderful page this helped me a lot

101
00:06:18,783 --> 00:06:22,743
because they have used they have given the documentation even that how can we

102
00:06:22,744 --> 00:06:26,752
do live transcription with Python and Django I had to make some changes in

103
00:06:26,753 --> 00:06:31,125
order to receive that so that was the helpful for part for me alright

104
00:06:31,126 --> 00:06:36,561
then we have also calculated the transcription latency

105
00:06:36,562 --> 00:06:41,476
so I'll just make a quick walkthrough to that as well so

106
00:06:41,477 --> 00:06:46,192
that is how we are actually calculating so even dbram api

107
00:06:46,193 --> 00:06:51,087
helps us to give that thing so here we what we do that we

108
00:06:51,088 --> 00:06:55,748
are basically calculating that transcription latency because that

109
00:06:55,749 --> 00:07:00,726
need to be configured and we basically contributing

110
00:07:00,727 --> 00:07:05,587
that time that ah the time that is ah that it is taking to

111
00:07:05,588 --> 00:07:10,157
ah render the audio data ah my

112
00:07:10,158 --> 00:07:13,699
ah difference by the one the total time taken by it.

113
00:07:13,700 --> 00:07:18,482
So, that was one and accuracy that how accurately

114
00:07:18,483 --> 00:07:21,561
it is able to determine that word that is already given in the ah

115
00:07:21,562 --> 00:07:24,679
Dibram API as well. So, that helps a lot.

116
00:07:24,680 --> 00:07:29,356
So, this was all about the code and our code is also deployable

117
00:07:29,357 --> 00:07:33,299
to Vercel. So, yeah that was about our project.

118
00:07:33,300 --> 00:07:35,309
Okay, I hope that helps.
